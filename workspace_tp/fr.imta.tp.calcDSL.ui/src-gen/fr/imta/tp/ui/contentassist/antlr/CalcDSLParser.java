/*
* generated by Xtext
*/
package fr.imta.tp.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.imta.tp.services.CalcDSLGrammarAccess;

public class CalcDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private CalcDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.imta.tp.ui.contentassist.antlr.internal.InternalCalcDSLParser createParser() {
		fr.imta.tp.ui.contentassist.antlr.internal.InternalCalcDSLParser result = new fr.imta.tp.ui.contentassist.antlr.internal.InternalCalcDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getCalculationAccess().getGroup(), "rule__Calculation__Group__0");
					put(grammarAccess.getCalculationAccess().getGroup_1(), "rule__Calculation__Group_1__0");
					put(grammarAccess.getCalcDSLAccess().getInstructionsAssignment(), "rule__CalcDSL__InstructionsAssignment");
					put(grammarAccess.getDeclarationAccess().getTypeAssignment_0(), "rule__Declaration__TypeAssignment_0");
					put(grammarAccess.getDeclarationAccess().getVariableAssignment_1(), "rule__Declaration__VariableAssignment_1");
					put(grammarAccess.getOperationAccess().getVariableAssignment_0(), "rule__Operation__VariableAssignment_0");
					put(grammarAccess.getOperationAccess().getCalculationAssignment_2(), "rule__Operation__CalculationAssignment_2");
					put(grammarAccess.getCalculationAccess().getInitAssignment_0(), "rule__Calculation__InitAssignment_0");
					put(grammarAccess.getCalculationAccess().getVectorsAssignment_1_1(), "rule__Calculation__VectorsAssignment_1_1");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.imta.tp.ui.contentassist.antlr.internal.InternalCalcDSLParser typedParser = (fr.imta.tp.ui.contentassist.antlr.internal.InternalCalcDSLParser) parser;
			typedParser.entryRuleCalcDSL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CalcDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CalcDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

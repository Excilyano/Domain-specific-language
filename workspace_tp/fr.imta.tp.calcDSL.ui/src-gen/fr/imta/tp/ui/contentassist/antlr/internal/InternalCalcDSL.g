/*
* generated by Xtext
*/
grammar InternalCalcDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.imta.tp.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.imta.tp.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.imta.tp.services.CalcDSLGrammarAccess;

}

@parser::members {
 
 	private CalcDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CalcDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCalcDSL
entryRuleCalcDSL 
:
{ before(grammarAccess.getCalcDSLRule()); }
	 ruleCalcDSL
{ after(grammarAccess.getCalcDSLRule()); } 
	 EOF 
;

// Rule CalcDSL
ruleCalcDSL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCalcDSLAccess().getInstructionsAssignment()); }
(rule__CalcDSL__InstructionsAssignment)*
{ after(grammarAccess.getCalcDSLAccess().getInstructionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getGroup()); }
(rule__Operation__Group__0)
{ after(grammarAccess.getOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCalculation
entryRuleCalculation 
:
{ before(grammarAccess.getCalculationRule()); }
	 ruleCalculation
{ after(grammarAccess.getCalculationRule()); } 
	 EOF 
;

// Rule Calculation
ruleCalculation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCalculationAccess().getGroup()); }
(rule__Calculation__Group__0)
{ after(grammarAccess.getCalculationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperand
entryRuleOperand 
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperandAccess().getAlternatives()); }
(rule__Operand__Alternatives)
{ after(grammarAccess.getOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperator
entryRuleOperator 
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
(rule__Variable__NameAssignment)
{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getDeclarationParserRuleCall_0()); }
	ruleDeclaration
{ after(grammarAccess.getInstructionAccess().getDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getOperationParserRuleCall_1()); }
	ruleOperation
{ after(grammarAccess.getInstructionAccess().getOperationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getIntKeyword_0()); }

	'int' 

{ after(grammarAccess.getTypeAccess().getIntKeyword_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getFloatKeyword_1()); }

	'float' 

{ after(grammarAccess.getTypeAccess().getFloatKeyword_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getDoubleKeyword_2()); }

	'double' 

{ after(grammarAccess.getTypeAccess().getDoubleKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getVariableParserRuleCall_0()); }
	ruleVariable
{ after(grammarAccess.getOperandAccess().getVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getDOUBLETerminalRuleCall_1()); }
	RULE_DOUBLE
{ after(grammarAccess.getOperandAccess().getDOUBLETerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getOperandAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getOperatorAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getOperatorAccess().getHyphenMinusKeyword_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getSolidusKeyword_2()); }

	'/' 

{ after(grammarAccess.getOperatorAccess().getSolidusKeyword_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getAsteriskKeyword_3()); }

	'*' 

{ after(grammarAccess.getOperatorAccess().getAsteriskKeyword_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getPercentSignKeyword_4()); }

	'%' 

{ after(grammarAccess.getOperatorAccess().getPercentSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
(rule__Declaration__TypeAssignment_0)
{ after(grammarAccess.getDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getVariableAssignment_1()); }
(rule__Declaration__VariableAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getDeclarationAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Operation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getVariableAssignment_0()); }
(rule__Operation__VariableAssignment_0)
{ after(grammarAccess.getOperationAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getOperationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getCalculationAssignment_2()); }
(rule__Operation__CalculationAssignment_2)
{ after(grammarAccess.getOperationAccess().getCalculationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Calculation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calculation__Group__0__Impl
	rule__Calculation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalculationAccess().getInitAssignment_0()); }
(rule__Calculation__InitAssignment_0)
{ after(grammarAccess.getCalculationAccess().getInitAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Calculation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calculation__Group__1__Impl
	rule__Calculation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalculationAccess().getGroup_1()); }
(rule__Calculation__Group_1__0)*
{ after(grammarAccess.getCalculationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Calculation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calculation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalculationAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getCalculationAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Calculation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calculation__Group_1__0__Impl
	rule__Calculation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalculationAccess().getOperatorParserRuleCall_1_0()); }
	ruleOperator
{ after(grammarAccess.getCalculationAccess().getOperatorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Calculation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Calculation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calculation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalculationAccess().getVectorsAssignment_1_1()); }
(rule__Calculation__VectorsAssignment_1_1)
{ after(grammarAccess.getCalculationAccess().getVectorsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__CalcDSL__InstructionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalcDSLAccess().getInstructionsInstructionParserRuleCall_0()); }
	ruleInstruction{ after(grammarAccess.getCalcDSLAccess().getInstructionsInstructionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getDeclarationAccess().getTypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getVariableVariableParserRuleCall_1_0()); }
	ruleVariable{ after(grammarAccess.getDeclarationAccess().getVariableVariableParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getVariableVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getOperationAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getOperationAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getOperationAccess().getVariableVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__CalculationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getCalculationCalculationParserRuleCall_2_0()); }
	ruleCalculation{ after(grammarAccess.getOperationAccess().getCalculationCalculationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Calculation__InitAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalculationAccess().getInitOperandParserRuleCall_0_0()); }
	ruleOperand{ after(grammarAccess.getCalculationAccess().getInitOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Calculation__VectorsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCalculationAccess().getVectorsOperandParserRuleCall_1_1_0()); }
	ruleOperand{ after(grammarAccess.getCalculationAccess().getVectorsOperandParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOUBLE : '-'? ('0'..'9')+ '.' ('0'..'9')+ (('e'|'E') '-'? ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



/*
* generated by Xtext
*/
package fr.imta.tp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Sql4csvGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SQL4CSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SQL4CSV");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//SQL4CSV:
		//	program=Program;
		public ParserRule getRule() { return rule; }

		//program=Program
		public Assignment getProgramAssignment() { return cProgramAssignment; }

		//Program
		public RuleCall getProgramProgramParserRuleCall_0() { return cProgramProgramParserRuleCall_0; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cQueriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQueriesQueryParserRuleCall_0 = (RuleCall)cQueriesAssignment.eContents().get(0);
		
		//Program:
		//	queries+=Query*;
		public ParserRule getRule() { return rule; }

		//queries+=Query*
		public Assignment getQueriesAssignment() { return cQueriesAssignment; }

		//Query
		public RuleCall getQueriesQueryParserRuleCall_0() { return cQueriesQueryParserRuleCall_0; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnColumnParserRuleCall_1_0 = (RuleCall)cColumnAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cColumnsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_2_1_0 = (RuleCall)cColumnsAssignment_2_1.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableTableParserRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTablesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_5_1_0 = (RuleCall)cTablesAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConditionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_6_1_0 = (RuleCall)cConditionsAssignment_6_1.eContents().get(0);
		
		//Query:
		//	"select" column=Column ("," columns+=Column)* "from" table=Table ("," tables+=Table)* ("where"
		//	conditions=Condition)?;
		public ParserRule getRule() { return rule; }

		//"select" column=Column ("," columns+=Column)* "from" table=Table ("," tables+=Table)* ("where" conditions=Condition)?
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//column=Column
		public Assignment getColumnAssignment_1() { return cColumnAssignment_1; }

		//Column
		public RuleCall getColumnColumnParserRuleCall_1_0() { return cColumnColumnParserRuleCall_1_0; }

		//("," columns+=Column)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//columns+=Column
		public Assignment getColumnsAssignment_2_1() { return cColumnsAssignment_2_1; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_1_0() { return cColumnsColumnParserRuleCall_2_1_0; }

		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }

		//table=Table
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }

		//Table
		public RuleCall getTableTableParserRuleCall_4_0() { return cTableTableParserRuleCall_4_0; }

		//("," tables+=Table)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//tables+=Table
		public Assignment getTablesAssignment_5_1() { return cTablesAssignment_5_1; }

		//Table
		public RuleCall getTablesTableParserRuleCall_5_1_0() { return cTablesTableParserRuleCall_5_1_0; }

		//("where" conditions=Condition)?
		public Group getGroup_6() { return cGroup_6; }

		//"where"
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }

		//conditions=Condition
		public Assignment getConditionsAssignment_6_1() { return cConditionsAssignment_6_1; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_6_1_0() { return cConditionsConditionParserRuleCall_6_1_0; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cTableTableCrossReference_0_0_0 = (CrossReference)cTableAssignment_0_0.eContents().get(0);
		private final RuleCall cTableTableIDTerminalRuleCall_0_0_0_1 = (RuleCall)cTableTableCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Column:
		//	(table=[Table] ".")? name=ID;
		public ParserRule getRule() { return rule; }

		//(table=[Table] ".")? name=ID
		public Group getGroup() { return cGroup; }

		//(table=[Table] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//table=[Table]
		public Assignment getTableAssignment_0_0() { return cTableAssignment_0_0; }

		//[Table]
		public CrossReference getTableTableCrossReference_0_0_0() { return cTableTableCrossReference_0_0_0; }

		//ID
		public RuleCall getTableTableIDTerminalRuleCall_0_0_0_1() { return cTableTableIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Table:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	BinaryCondition | Equality;
		public ParserRule getRule() { return rule; }

		//BinaryCondition | Equality
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryCondition
		public RuleCall getBinaryConditionParserRuleCall_0() { return cBinaryConditionParserRuleCall_0; }

		//Equality
		public RuleCall getEqualityParserRuleCall_1() { return cEqualityParserRuleCall_1; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftColumnParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRightAlternatives_2_0 = (Alternatives)cRightAssignment_2.eContents().get(0);
		private final RuleCall cRightColumnEqualityParserRuleCall_2_0_0 = (RuleCall)cRightAlternatives_2_0.eContents().get(0);
		private final RuleCall cRightValueEqualityParserRuleCall_2_0_1 = (RuleCall)cRightAlternatives_2_0.eContents().get(1);
		
		//Equality:
		//	left=Column "=" right=(ColumnEquality | ValueEquality);
		public ParserRule getRule() { return rule; }

		//left=Column "=" right=(ColumnEquality | ValueEquality)
		public Group getGroup() { return cGroup; }

		//left=Column
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Column
		public RuleCall getLeftColumnParserRuleCall_0_0() { return cLeftColumnParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=(ColumnEquality | ValueEquality)
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//ColumnEquality | ValueEquality
		public Alternatives getRightAlternatives_2_0() { return cRightAlternatives_2_0; }

		//ColumnEquality
		public RuleCall getRightColumnEqualityParserRuleCall_2_0_0() { return cRightColumnEqualityParserRuleCall_2_0_0; }

		//ValueEquality
		public RuleCall getRightValueEqualityParserRuleCall_2_0_1() { return cRightValueEqualityParserRuleCall_2_0_1; }
	}

	public class BinaryConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BinaryCondition:
		//	AndCondition | OrCondition;
		public ParserRule getRule() { return rule; }

		//AndCondition | OrCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//AndCondition
		public RuleCall getAndConditionParserRuleCall_0() { return cAndConditionParserRuleCall_0; }

		//OrCondition
		public RuleCall getOrConditionParserRuleCall_1() { return cOrConditionParserRuleCall_1; }
	}

	public class ColumnEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnEquality");
		private final Assignment cRightAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRightColumnParserRuleCall_0 = (RuleCall)cRightAssignment.eContents().get(0);
		
		//ColumnEquality:
		//	right=Column;
		public ParserRule getRule() { return rule; }

		//right=Column
		public Assignment getRightAssignment() { return cRightAssignment; }

		//Column
		public RuleCall getRightColumnParserRuleCall_0() { return cRightColumnParserRuleCall_0; }
	}

	public class ValueEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueEquality");
		private final Assignment cRightAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRightSTRINGTerminalRuleCall_0 = (RuleCall)cRightAssignment.eContents().get(0);
		
		//ValueEquality:
		//	right=STRING;
		public ParserRule getRule() { return rule; }

		//right=STRING
		public Assignment getRightAssignment() { return cRightAssignment; }

		//STRING
		public RuleCall getRightSTRINGTerminalRuleCall_0() { return cRightSTRINGTerminalRuleCall_0; }
	}

	public class AndConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEqualityParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightConditionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AndCondition:
		//	left=Equality "and" "(" right=Condition ")";
		public ParserRule getRule() { return rule; }

		//left=Equality "and" "(" right=Condition ")"
		public Group getGroup() { return cGroup; }

		//left=Equality
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Equality
		public RuleCall getLeftEqualityParserRuleCall_0_0() { return cLeftEqualityParserRuleCall_0_0; }

		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//right=Condition
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//Condition
		public RuleCall getRightConditionParserRuleCall_3_0() { return cRightConditionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OrConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEqualityParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightConditionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrCondition:
		//	left=Equality "or" "(" right=Condition ")";
		public ParserRule getRule() { return rule; }

		//left=Equality "or" "(" right=Condition ")"
		public Group getGroup() { return cGroup; }

		//left=Equality
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Equality
		public RuleCall getLeftEqualityParserRuleCall_0_0() { return cLeftEqualityParserRuleCall_0_0; }

		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//right=Condition
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//Condition
		public RuleCall getRightConditionParserRuleCall_3_0() { return cRightConditionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private SQL4CSVElements pSQL4CSV;
	private ProgramElements pProgram;
	private QueryElements pQuery;
	private ColumnElements pColumn;
	private TableElements pTable;
	private ConditionElements pCondition;
	private EqualityElements pEquality;
	private BinaryConditionElements pBinaryCondition;
	private ColumnEqualityElements pColumnEquality;
	private ValueEqualityElements pValueEquality;
	private AndConditionElements pAndCondition;
	private OrConditionElements pOrCondition;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Sql4csvGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.imta.tp.Sql4csv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SQL4CSV:
	//	program=Program;
	public SQL4CSVElements getSQL4CSVAccess() {
		return (pSQL4CSV != null) ? pSQL4CSV : (pSQL4CSV = new SQL4CSVElements());
	}
	
	public ParserRule getSQL4CSVRule() {
		return getSQL4CSVAccess().getRule();
	}

	//Program:
	//	queries+=Query*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Query:
	//	"select" column=Column ("," columns+=Column)* "from" table=Table ("," tables+=Table)* ("where"
	//	conditions=Condition)?;
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Column:
	//	(table=[Table] ".")? name=ID;
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//Table:
	//	name=ID;
	public TableElements getTableAccess() {
		return (pTable != null) ? pTable : (pTable = new TableElements());
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//Condition:
	//	BinaryCondition | Equality;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Equality:
	//	left=Column "=" right=(ColumnEquality | ValueEquality);
	public EqualityElements getEqualityAccess() {
		return (pEquality != null) ? pEquality : (pEquality = new EqualityElements());
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//BinaryCondition:
	//	AndCondition | OrCondition;
	public BinaryConditionElements getBinaryConditionAccess() {
		return (pBinaryCondition != null) ? pBinaryCondition : (pBinaryCondition = new BinaryConditionElements());
	}
	
	public ParserRule getBinaryConditionRule() {
		return getBinaryConditionAccess().getRule();
	}

	//ColumnEquality:
	//	right=Column;
	public ColumnEqualityElements getColumnEqualityAccess() {
		return (pColumnEquality != null) ? pColumnEquality : (pColumnEquality = new ColumnEqualityElements());
	}
	
	public ParserRule getColumnEqualityRule() {
		return getColumnEqualityAccess().getRule();
	}

	//ValueEquality:
	//	right=STRING;
	public ValueEqualityElements getValueEqualityAccess() {
		return (pValueEquality != null) ? pValueEquality : (pValueEquality = new ValueEqualityElements());
	}
	
	public ParserRule getValueEqualityRule() {
		return getValueEqualityAccess().getRule();
	}

	//AndCondition:
	//	left=Equality "and" "(" right=Condition ")";
	public AndConditionElements getAndConditionAccess() {
		return (pAndCondition != null) ? pAndCondition : (pAndCondition = new AndConditionElements());
	}
	
	public ParserRule getAndConditionRule() {
		return getAndConditionAccess().getRule();
	}

	//OrCondition:
	//	left=Equality "or" "(" right=Condition ")";
	public OrConditionElements getOrConditionAccess() {
		return (pOrCondition != null) ? pOrCondition : (pOrCondition = new OrConditionElements());
	}
	
	public ParserRule getOrConditionRule() {
		return getOrConditionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

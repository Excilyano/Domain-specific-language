/*
* generated by Xtext
*/
package fr.imta.tp.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.imta.tp.services.Sql4csvGrammarAccess;

public class Sql4csvParser extends AbstractContentAssistParser {
	
	@Inject
	private Sql4csvGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.imta.tp.ui.contentassist.antlr.internal.InternalSql4csvParser createParser() {
		fr.imta.tp.ui.contentassist.antlr.internal.InternalSql4csvParser result = new fr.imta.tp.ui.contentassist.antlr.internal.InternalSql4csvParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getEqualityAccess().getRightAlternatives_2_0(), "rule__Equality__RightAlternatives_2_0");
					put(grammarAccess.getBinaryConditionAccess().getAlternatives(), "rule__BinaryCondition__Alternatives");
					put(grammarAccess.getQueryAccess().getGroup(), "rule__Query__Group__0");
					put(grammarAccess.getQueryAccess().getGroup_2(), "rule__Query__Group_2__0");
					put(grammarAccess.getQueryAccess().getGroup_5(), "rule__Query__Group_5__0");
					put(grammarAccess.getQueryAccess().getGroup_6(), "rule__Query__Group_6__0");
					put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
					put(grammarAccess.getColumnAccess().getGroup_0(), "rule__Column__Group_0__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getAndConditionAccess().getGroup(), "rule__AndCondition__Group__0");
					put(grammarAccess.getOrConditionAccess().getGroup(), "rule__OrCondition__Group__0");
					put(grammarAccess.getSQL4CSVAccess().getProgramAssignment(), "rule__SQL4CSV__ProgramAssignment");
					put(grammarAccess.getProgramAccess().getQueriesAssignment(), "rule__Program__QueriesAssignment");
					put(grammarAccess.getQueryAccess().getColumnAssignment_1(), "rule__Query__ColumnAssignment_1");
					put(grammarAccess.getQueryAccess().getColumnsAssignment_2_1(), "rule__Query__ColumnsAssignment_2_1");
					put(grammarAccess.getQueryAccess().getTableAssignment_4(), "rule__Query__TableAssignment_4");
					put(grammarAccess.getQueryAccess().getTablesAssignment_5_1(), "rule__Query__TablesAssignment_5_1");
					put(grammarAccess.getQueryAccess().getConditionsAssignment_6_1(), "rule__Query__ConditionsAssignment_6_1");
					put(grammarAccess.getColumnAccess().getTableAssignment_0_0(), "rule__Column__TableAssignment_0_0");
					put(grammarAccess.getColumnAccess().getNameAssignment_1(), "rule__Column__NameAssignment_1");
					put(grammarAccess.getTableAccess().getNameAssignment(), "rule__Table__NameAssignment");
					put(grammarAccess.getEqualityAccess().getLeftAssignment_0(), "rule__Equality__LeftAssignment_0");
					put(grammarAccess.getEqualityAccess().getRightAssignment_2(), "rule__Equality__RightAssignment_2");
					put(grammarAccess.getColumnEqualityAccess().getRightAssignment(), "rule__ColumnEquality__RightAssignment");
					put(grammarAccess.getValueEqualityAccess().getRightAssignment(), "rule__ValueEquality__RightAssignment");
					put(grammarAccess.getAndConditionAccess().getLeftAssignment_0(), "rule__AndCondition__LeftAssignment_0");
					put(grammarAccess.getAndConditionAccess().getRightAssignment_3(), "rule__AndCondition__RightAssignment_3");
					put(grammarAccess.getOrConditionAccess().getLeftAssignment_0(), "rule__OrCondition__LeftAssignment_0");
					put(grammarAccess.getOrConditionAccess().getRightAssignment_3(), "rule__OrCondition__RightAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.imta.tp.ui.contentassist.antlr.internal.InternalSql4csvParser typedParser = (fr.imta.tp.ui.contentassist.antlr.internal.InternalSql4csvParser) parser;
			typedParser.entryRuleSQL4CSV();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Sql4csvGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Sql4csvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

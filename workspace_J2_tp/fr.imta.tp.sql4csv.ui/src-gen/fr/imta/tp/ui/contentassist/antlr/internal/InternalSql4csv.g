/*
* generated by Xtext
*/
grammar InternalSql4csv;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.imta.tp.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.imta.tp.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.imta.tp.services.Sql4csvGrammarAccess;

}

@parser::members {
 
 	private Sql4csvGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Sql4csvGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSQL4CSV
entryRuleSQL4CSV 
:
{ before(grammarAccess.getSQL4CSVRule()); }
	 ruleSQL4CSV
{ after(grammarAccess.getSQL4CSVRule()); } 
	 EOF 
;

// Rule SQL4CSV
ruleSQL4CSV
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSQL4CSVAccess().getProgramAssignment()); }
(rule__SQL4CSV__ProgramAssignment)
{ after(grammarAccess.getSQL4CSVAccess().getProgramAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getQueriesAssignment()); }
(rule__Program__QueriesAssignment)*
{ after(grammarAccess.getProgramAccess().getQueriesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuery
entryRuleQuery 
:
{ before(grammarAccess.getQueryRule()); }
	 ruleQuery
{ after(grammarAccess.getQueryRule()); } 
	 EOF 
;

// Rule Query
ruleQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQueryAccess().getGroup()); }
(rule__Query__Group__0)
{ after(grammarAccess.getQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumn
entryRuleColumn 
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnAccess().getGroup()); }
(rule__Column__Group__0)
{ after(grammarAccess.getColumnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTable
entryRuleTable 
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableAccess().getNameAssignment()); }
(rule__Table__NameAssignment)
{ after(grammarAccess.getTableAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getAlternatives()); }
(rule__Condition__Alternatives)
{ after(grammarAccess.getConditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquality
entryRuleEquality 
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityAccess().getGroup()); }
(rule__Equality__Group__0)
{ after(grammarAccess.getEqualityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryCondition
entryRuleBinaryCondition 
:
{ before(grammarAccess.getBinaryConditionRule()); }
	 ruleBinaryCondition
{ after(grammarAccess.getBinaryConditionRule()); } 
	 EOF 
;

// Rule BinaryCondition
ruleBinaryCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryConditionAccess().getAlternatives()); }
(rule__BinaryCondition__Alternatives)
{ after(grammarAccess.getBinaryConditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnEquality
entryRuleColumnEquality 
:
{ before(grammarAccess.getColumnEqualityRule()); }
	 ruleColumnEquality
{ after(grammarAccess.getColumnEqualityRule()); } 
	 EOF 
;

// Rule ColumnEquality
ruleColumnEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnEqualityAccess().getRightAssignment()); }
(rule__ColumnEquality__RightAssignment)
{ after(grammarAccess.getColumnEqualityAccess().getRightAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueEquality
entryRuleValueEquality 
:
{ before(grammarAccess.getValueEqualityRule()); }
	 ruleValueEquality
{ after(grammarAccess.getValueEqualityRule()); } 
	 EOF 
;

// Rule ValueEquality
ruleValueEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueEqualityAccess().getRightAssignment()); }
(rule__ValueEquality__RightAssignment)
{ after(grammarAccess.getValueEqualityAccess().getRightAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndCondition
entryRuleAndCondition 
:
{ before(grammarAccess.getAndConditionRule()); }
	 ruleAndCondition
{ after(grammarAccess.getAndConditionRule()); } 
	 EOF 
;

// Rule AndCondition
ruleAndCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndConditionAccess().getGroup()); }
(rule__AndCondition__Group__0)
{ after(grammarAccess.getAndConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrCondition
entryRuleOrCondition 
:
{ before(grammarAccess.getOrConditionRule()); }
	 ruleOrCondition
{ after(grammarAccess.getOrConditionRule()); } 
	 EOF 
;

// Rule OrCondition
ruleOrCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrConditionAccess().getGroup()); }
(rule__OrCondition__Group__0)
{ after(grammarAccess.getOrConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Condition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getBinaryConditionParserRuleCall_0()); }
	ruleBinaryCondition
{ after(grammarAccess.getConditionAccess().getBinaryConditionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getEqualityParserRuleCall_1()); }
	ruleEquality
{ after(grammarAccess.getConditionAccess().getEqualityParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightColumnEqualityParserRuleCall_2_0_0()); }
	ruleColumnEquality
{ after(grammarAccess.getEqualityAccess().getRightColumnEqualityParserRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getRightValueEqualityParserRuleCall_2_0_1()); }
	ruleValueEquality
{ after(grammarAccess.getEqualityAccess().getRightValueEqualityParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getAndConditionParserRuleCall_0()); }
	ruleAndCondition
{ after(grammarAccess.getBinaryConditionAccess().getAndConditionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBinaryConditionAccess().getOrConditionParserRuleCall_1()); }
	ruleOrCondition
{ after(grammarAccess.getBinaryConditionAccess().getOrConditionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Query__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__0__Impl
	rule__Query__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getSelectKeyword_0()); }

	'select' 

{ after(grammarAccess.getQueryAccess().getSelectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__1__Impl
	rule__Query__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getColumnAssignment_1()); }
(rule__Query__ColumnAssignment_1)
{ after(grammarAccess.getQueryAccess().getColumnAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__2__Impl
	rule__Query__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getGroup_2()); }
(rule__Query__Group_2__0)*
{ after(grammarAccess.getQueryAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__3__Impl
	rule__Query__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getFromKeyword_3()); }

	'from' 

{ after(grammarAccess.getQueryAccess().getFromKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__4__Impl
	rule__Query__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getTableAssignment_4()); }
(rule__Query__TableAssignment_4)
{ after(grammarAccess.getQueryAccess().getTableAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__5__Impl
	rule__Query__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getGroup_5()); }
(rule__Query__Group_5__0)*
{ after(grammarAccess.getQueryAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getGroup_6()); }
(rule__Query__Group_6__0)?
{ after(grammarAccess.getQueryAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Query__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_2__0__Impl
	rule__Query__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getQueryAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getColumnsAssignment_2_1()); }
(rule__Query__ColumnsAssignment_2_1)
{ after(grammarAccess.getQueryAccess().getColumnsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Query__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_5__0__Impl
	rule__Query__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getQueryAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getTablesAssignment_5_1()); }
(rule__Query__TablesAssignment_5_1)
{ after(grammarAccess.getQueryAccess().getTablesAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Query__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_6__0__Impl
	rule__Query__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getWhereKeyword_6_0()); }

	'where' 

{ after(grammarAccess.getQueryAccess().getWhereKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Query__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Query__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Query__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getConditionsAssignment_6_1()); }
(rule__Query__ConditionsAssignment_6_1)
{ after(grammarAccess.getQueryAccess().getConditionsAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Column__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getGroup_0()); }
(rule__Column__Group_0__0)?
{ after(grammarAccess.getColumnAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameAssignment_1()); }
(rule__Column__NameAssignment_1)
{ after(grammarAccess.getColumnAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Column__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group_0__0__Impl
	rule__Column__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getTableAssignment_0_0()); }
(rule__Column__TableAssignment_0_0)
{ after(grammarAccess.getColumnAccess().getTableAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Column__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getColumnAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getLeftAssignment_0()); }
(rule__Equality__LeftAssignment_0)
{ after(grammarAccess.getEqualityAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__1__Impl
	rule__Equality__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getEqualityAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_2()); }
(rule__Equality__RightAssignment_2)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndCondition__Group__0__Impl
	rule__AndCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndConditionAccess().getLeftAssignment_0()); }
(rule__AndCondition__LeftAssignment_0)
{ after(grammarAccess.getAndConditionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndCondition__Group__1__Impl
	rule__AndCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndConditionAccess().getAndKeyword_1()); }

	'and' 

{ after(grammarAccess.getAndConditionAccess().getAndKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndCondition__Group__2__Impl
	rule__AndCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndConditionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getAndConditionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndCondition__Group__3__Impl
	rule__AndCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndConditionAccess().getRightAssignment_3()); }
(rule__AndCondition__RightAssignment_3)
{ after(grammarAccess.getAndConditionAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndCondition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndConditionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAndConditionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__OrCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrCondition__Group__0__Impl
	rule__OrCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrConditionAccess().getLeftAssignment_0()); }
(rule__OrCondition__LeftAssignment_0)
{ after(grammarAccess.getOrConditionAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrCondition__Group__1__Impl
	rule__OrCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrConditionAccess().getOrKeyword_1()); }

	'or' 

{ after(grammarAccess.getOrConditionAccess().getOrKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrCondition__Group__2__Impl
	rule__OrCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrConditionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getOrConditionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrCondition__Group__3__Impl
	rule__OrCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrConditionAccess().getRightAssignment_3()); }
(rule__OrCondition__RightAssignment_3)
{ after(grammarAccess.getOrConditionAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrCondition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrConditionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getOrConditionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__SQL4CSV__ProgramAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSQL4CSVAccess().getProgramProgramParserRuleCall_0()); }
	ruleProgram{ after(grammarAccess.getSQL4CSVAccess().getProgramProgramParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__QueriesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getQueriesQueryParserRuleCall_0()); }
	ruleQuery{ after(grammarAccess.getProgramAccess().getQueriesQueryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ColumnAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getColumnColumnParserRuleCall_1_0()); }
	ruleColumn{ after(grammarAccess.getQueryAccess().getColumnColumnParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ColumnsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getColumnsColumnParserRuleCall_2_1_0()); }
	ruleColumn{ after(grammarAccess.getQueryAccess().getColumnsColumnParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__TableAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getTableTableParserRuleCall_4_0()); }
	ruleTable{ after(grammarAccess.getQueryAccess().getTableTableParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__TablesAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getTablesTableParserRuleCall_5_1_0()); }
	ruleTable{ after(grammarAccess.getQueryAccess().getTablesTableParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Query__ConditionsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQueryAccess().getConditionsConditionParserRuleCall_6_1_0()); }
	ruleCondition{ after(grammarAccess.getQueryAccess().getConditionsConditionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__TableAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getTableTableCrossReference_0_0_0()); }
(
{ before(grammarAccess.getColumnAccess().getTableTableIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getColumnAccess().getTableTableIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getColumnAccess().getTableTableCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getLeftColumnParserRuleCall_0_0()); }
	ruleColumn{ after(grammarAccess.getEqualityAccess().getLeftColumnParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAlternatives_2_0()); }
(rule__Equality__RightAlternatives_2_0)
{ after(grammarAccess.getEqualityAccess().getRightAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnEquality__RightAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnEqualityAccess().getRightColumnParserRuleCall_0()); }
	ruleColumn{ after(grammarAccess.getColumnEqualityAccess().getRightColumnParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueEquality__RightAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueEqualityAccess().getRightSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getValueEqualityAccess().getRightSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndConditionAccess().getLeftEqualityParserRuleCall_0_0()); }
	ruleEquality{ after(grammarAccess.getAndConditionAccess().getLeftEqualityParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndConditionAccess().getRightConditionParserRuleCall_3_0()); }
	ruleCondition{ after(grammarAccess.getAndConditionAccess().getRightConditionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrConditionAccess().getLeftEqualityParserRuleCall_0_0()); }
	ruleEquality{ after(grammarAccess.getOrConditionAccess().getLeftEqualityParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrConditionAccess().getRightConditionParserRuleCall_3_0()); }
	ruleCondition{ after(grammarAccess.getOrConditionAccess().getRightConditionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



/*
* generated by Xtext
*/
grammar InternalStatDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.imta.tp2.statDSL.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.imta.tp2.statDSL.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.imta.tp2.statDSL.services.StatDSLGrammarAccess;

}

@parser::members {

 	private StatDSLGrammarAccess grammarAccess;
 	
    public InternalStatDSLParser(TokenStream input, StatDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "StatDSL";	
   	}
   	
   	@Override
   	protected StatDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStatDSL
entryRuleStatDSL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatDSLRule()); }
	 iv_ruleStatDSL=ruleStatDSL 
	 { $current=$iv_ruleStatDSL.current; } 
	 EOF 
;

// Rule StatDSL
ruleStatDSL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatDSLAccess().getProgramProgramParserRuleCall_0()); 
	    }
		lv_program_0_0=ruleProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatDSLRule());
	        }
       		set(
       			$current, 
       			"program",
        		lv_program_0_0, 
        		"Program");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='program' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='begin' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getBeginKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getInstructionsParserRuleCall_3()); 
    }
ruleInstructions
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_4='return' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProgramAccess().getReturnKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getProgramAccess().getKeywordParserRuleCall_5()); 
    }
ruleKeyword
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProgramAccess().getSemicolonKeyword_6());
    }
	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProgramAccess().getEndKeyword_7());
    }
)
;





// Entry rule entryRuleKeyword
entryRuleKeyword returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordRule()); } 
	 iv_ruleKeyword=ruleKeyword 
	 { $current=$iv_ruleKeyword.current.getText(); }  
	 EOF 
;

// Rule Keyword
ruleKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='moyenne' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getMoyenneKeyword_0()); 
    }

    |
	kw='variance' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getVarianceKeyword_1()); 
    }

    |
	kw='ecart-type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getEcartTypeKeyword_2()); 
    }

    |
	kw='mode' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getKeywordAccess().getModeKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleInstructions
entryRuleInstructions returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionsRule()); } 
	 iv_ruleInstructions=ruleInstructions 
	 { $current=$iv_ruleInstructions.current.getText(); }  
	 EOF 
;

// Rule Instructions
ruleInstructions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getInstructionsAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>(
    { 
        newCompositeNode(grammarAccess.getInstructionsAccess().getModParserRuleCall_0()); 
    }
    this_Mod_1=ruleMod    {
		$current.merge(this_Mod_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInstructionsAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(
    { 
        newCompositeNode(grammarAccess.getInstructionsAccess().getEffParserRuleCall_1()); 
    }
    this_Eff_2=ruleEff    {
		$current.merge(this_Eff_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInstructionsAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getInstructionsAccess().getUnorderedGroup())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getInstructionsAccess().getUnorderedGroup());
	}

)
    ;





// Entry rule entryRuleEff
entryRuleEff returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffRule()); } 
	 iv_ruleEff=ruleEff 
	 { $current=$iv_ruleEff.current.getText(); }  
	 EOF 
;

// Rule Eff
ruleEff returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='eff : ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEffAccess().getEffKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEffAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEffAccess().getCommaKeyword_2_0()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getEffAccess().getINTTerminalRuleCall_2_1()); 
    }
)*
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEffAccess().getSemicolonKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleMod
entryRuleMod returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModRule()); } 
	 iv_ruleMod=ruleMod 
	 { $current=$iv_ruleMod.current.getText(); }  
	 EOF 
;

// Rule Mod
ruleMod returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='mod : ' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModAccess().getModKeyword_0()); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getModAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModAccess().getCommaKeyword_2_0()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getModAccess().getINTTerminalRuleCall_2_1()); 
    }
)*
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModAccess().getSemicolonKeyword_3()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



/*
* generated by Xtext
*/
package fr.imta.tp2.calendarDSL.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.imta.tp2.calendarDSL.services.CalendarDSLGrammarAccess;

public class CalendarDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private CalendarDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.imta.tp2.calendarDSL.ui.contentassist.antlr.internal.InternalCalendarDSLParser createParser() {
		fr.imta.tp2.calendarDSL.ui.contentassist.antlr.internal.InternalCalendarDSLParser result = new fr.imta.tp2.calendarDSL.ui.contentassist.antlr.internal.InternalCalendarDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCalendarAccess().getGroup(), "rule__Calendar__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_3_0(), "rule__Event__Group_3_0__0");
					put(grammarAccess.getEventAccess().getGroup_3_1(), "rule__Event__Group_3_1__0");
					put(grammarAccess.getEventAccess().getGroup_3_2(), "rule__Event__Group_3_2__0");
					put(grammarAccess.getEventAccess().getGroup_3_3(), "rule__Event__Group_3_3__0");
					put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
					put(grammarAccess.getCalendarAccess().getEventsAssignment_3(), "rule__Calendar__EventsAssignment_3");
					put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
					put(grammarAccess.getEventAccess().getOnAssignment_3_0_1(), "rule__Event__OnAssignment_3_0_1");
					put(grammarAccess.getEventAccess().getFromAssignment_3_1_1(), "rule__Event__FromAssignment_3_1_1");
					put(grammarAccess.getEventAccess().getToAssignment_3_2_1(), "rule__Event__ToAssignment_3_2_1");
					put(grammarAccess.getEventAccess().getAtAssignment_3_3_1(), "rule__Event__AtAssignment_3_3_1");
					put(grammarAccess.getDateAccess().getYearAssignment_0(), "rule__Date__YearAssignment_0");
					put(grammarAccess.getDateAccess().getMonthAssignment_2(), "rule__Date__MonthAssignment_2");
					put(grammarAccess.getDateAccess().getDayAssignment_4(), "rule__Date__DayAssignment_4");
					put(grammarAccess.getEventAccess().getUnorderedGroup_3(), "rule__Event__UnorderedGroup_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.imta.tp2.calendarDSL.ui.contentassist.antlr.internal.InternalCalendarDSLParser typedParser = (fr.imta.tp2.calendarDSL.ui.contentassist.antlr.internal.InternalCalendarDSLParser) parser;
			typedParser.entryRuleCalendar();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CalendarDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CalendarDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

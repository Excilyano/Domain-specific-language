/*
* generated by Xtext
*/
grammar InternalStatDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.imta.tp2.statDSL.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.imta.tp2.statDSL.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.imta.tp2.statDSL.services.StatDSLGrammarAccess;

}

@parser::members {
 
 	private StatDSLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(StatDSLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleStatDSL
entryRuleStatDSL 
:
{ before(grammarAccess.getStatDSLRule()); }
	 ruleStatDSL
{ after(grammarAccess.getStatDSLRule()); } 
	 EOF 
;

// Rule StatDSL
ruleStatDSL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatDSLAccess().getProgramAssignment()); }
(rule__StatDSL__ProgramAssignment)
{ after(grammarAccess.getStatDSLAccess().getProgramAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyword
entryRuleKeyword 
:
{ before(grammarAccess.getKeywordRule()); }
	 ruleKeyword
{ after(grammarAccess.getKeywordRule()); } 
	 EOF 
;

// Rule Keyword
ruleKeyword
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeywordAccess().getAlternatives()); }
(rule__Keyword__Alternatives)
{ after(grammarAccess.getKeywordAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstructions
entryRuleInstructions 
:
{ before(grammarAccess.getInstructionsRule()); }
	 ruleInstructions
{ after(grammarAccess.getInstructionsRule()); } 
	 EOF 
;

// Rule Instructions
ruleInstructions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionsAccess().getUnorderedGroup()); }
(rule__Instructions__UnorderedGroup)
{ after(grammarAccess.getInstructionsAccess().getUnorderedGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEff
entryRuleEff 
:
{ before(grammarAccess.getEffRule()); }
	 ruleEff
{ after(grammarAccess.getEffRule()); } 
	 EOF 
;

// Rule Eff
ruleEff
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEffAccess().getGroup()); }
(rule__Eff__Group__0)
{ after(grammarAccess.getEffAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMod
entryRuleMod 
:
{ before(grammarAccess.getModRule()); }
	 ruleMod
{ after(grammarAccess.getModRule()); } 
	 EOF 
;

// Rule Mod
ruleMod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModAccess().getGroup()); }
(rule__Mod__Group__0)
{ after(grammarAccess.getModAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Keyword__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeywordAccess().getMoyenneKeyword_0()); }

	'moyenne' 

{ after(grammarAccess.getKeywordAccess().getMoyenneKeyword_0()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getVarianceKeyword_1()); }

	'variance' 

{ after(grammarAccess.getKeywordAccess().getVarianceKeyword_1()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getEcartTypeKeyword_2()); }

	'ecart-type' 

{ after(grammarAccess.getKeywordAccess().getEcartTypeKeyword_2()); }
)

    |(
{ before(grammarAccess.getKeywordAccess().getModeKeyword_3()); }

	'mode' 

{ after(grammarAccess.getKeywordAccess().getModeKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }

	'program' 

{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
(rule__Program__NameAssignment_1)
{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getBeginKeyword_2()); }

	'begin' 

{ after(grammarAccess.getProgramAccess().getBeginKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getInstructionsParserRuleCall_3()); }
	ruleInstructions
{ after(grammarAccess.getProgramAccess().getInstructionsParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getReturnKeyword_4()); }

	'return' 

{ after(grammarAccess.getProgramAccess().getReturnKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__5__Impl
	rule__Program__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getKeywordParserRuleCall_5()); }
	ruleKeyword
{ after(grammarAccess.getProgramAccess().getKeywordParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__6__Impl
	rule__Program__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getEndKeyword_7()); }

	'end' 

{ after(grammarAccess.getProgramAccess().getEndKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Eff__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Eff__Group__0__Impl
	rule__Eff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Eff__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffAccess().getEffKeyword_0()); }

	'eff : ' 

{ after(grammarAccess.getEffAccess().getEffKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Eff__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Eff__Group__1__Impl
	rule__Eff__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Eff__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEffAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Eff__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Eff__Group__2__Impl
	rule__Eff__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Eff__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffAccess().getGroup_2()); }
(rule__Eff__Group_2__0)*
{ after(grammarAccess.getEffAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Eff__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Eff__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Eff__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getEffAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Eff__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Eff__Group_2__0__Impl
	rule__Eff__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Eff__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getEffAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Eff__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Eff__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Eff__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
{ after(grammarAccess.getEffAccess().getINTTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__0__Impl
	rule__Mod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getModKeyword_0()); }

	'mod : ' 

{ after(grammarAccess.getModAccess().getModKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__1__Impl
	rule__Mod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getModAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__2__Impl
	rule__Mod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getGroup_2()); }
(rule__Mod__Group_2__0)*
{ after(grammarAccess.getModAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getModAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Mod__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group_2__0__Impl
	rule__Mod__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getModAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
{ after(grammarAccess.getModAccess().getINTTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Instructions__UnorderedGroup
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getInstructionsAccess().getUnorderedGroup());
    }
:
	rule__Instructions__UnorderedGroup__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getInstructionsAccess().getUnorderedGroup())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getInstructionsAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__Instructions__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getInstructionsAccess().getModParserRuleCall_0()); }
						(	ruleMod)
						{ after(grammarAccess.getInstructionsAccess().getModParserRuleCall_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getInstructionsAccess().getUnorderedGroup(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getInstructionsAccess().getEffParserRuleCall_1()); }
						(	ruleEff)
						{ after(grammarAccess.getInstructionsAccess().getEffParserRuleCall_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInstructionsAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__Instructions__UnorderedGroup__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instructions__UnorderedGroup__Impl
	rule__Instructions__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Instructions__UnorderedGroup__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instructions__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__StatDSL__ProgramAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatDSLAccess().getProgramProgramParserRuleCall_0()); }
	ruleProgram{ after(grammarAccess.getStatDSLAccess().getProgramProgramParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



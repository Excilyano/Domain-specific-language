/*
* generated by Xtext
*/
package fr.imta.tp2.calendarDSL.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CalendarDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CalendarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Calendar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCalendarAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCalendarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventsEventParserRuleCall_3_0 = (RuleCall)cEventsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Calendar:
		//	{Calendar} "calendar" "{" events+=Event* "}";
		public ParserRule getRule() { return rule; }

		//{Calendar} "calendar" "{" events+=Event* "}"
		public Group getGroup() { return cGroup; }

		//{Calendar}
		public Action getCalendarAction_0() { return cCalendarAction_0; }

		//"calendar"
		public Keyword getCalendarKeyword_1() { return cCalendarKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//events+=Event*
		public Assignment getEventsAssignment_3() { return cEventsAssignment_3; }

		//Event
		public RuleCall getEventsEventParserRuleCall_3_0() { return cEventsEventParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cOnKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOnAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOnDateParserRuleCall_3_0_1_0 = (RuleCall)cOnAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cFromKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFromAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFromTIMETerminalRuleCall_3_1_1_0 = (RuleCall)cFromAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cToKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cToAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cToTIMETerminalRuleCall_3_2_1_0 = (RuleCall)cToAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cAtKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cAtAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cAtSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cAtAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Event:
		//	"event" name=STRING "{" ("on" on=Date & ("from" from=TIME)? & ("to" to=TIME)? & ("at" at=STRING)?) "}";
		public ParserRule getRule() { return rule; }

		//"event" name=STRING "{" ("on" on=Date & ("from" from=TIME)? & ("to" to=TIME)? & ("at" at=STRING)?) "}"
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"on" on=Date & ("from" from=TIME)? & ("to" to=TIME)? & ("at" at=STRING)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"on" on=Date
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"on"
		public Keyword getOnKeyword_3_0_0() { return cOnKeyword_3_0_0; }

		//on=Date
		public Assignment getOnAssignment_3_0_1() { return cOnAssignment_3_0_1; }

		//Date
		public RuleCall getOnDateParserRuleCall_3_0_1_0() { return cOnDateParserRuleCall_3_0_1_0; }

		//("from" from=TIME)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"from"
		public Keyword getFromKeyword_3_1_0() { return cFromKeyword_3_1_0; }

		//from=TIME
		public Assignment getFromAssignment_3_1_1() { return cFromAssignment_3_1_1; }

		//TIME
		public RuleCall getFromTIMETerminalRuleCall_3_1_1_0() { return cFromTIMETerminalRuleCall_3_1_1_0; }

		//("to" to=TIME)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"to"
		public Keyword getToKeyword_3_2_0() { return cToKeyword_3_2_0; }

		//to=TIME
		public Assignment getToAssignment_3_2_1() { return cToAssignment_3_2_1; }

		//TIME
		public RuleCall getToTIMETerminalRuleCall_3_2_1_0() { return cToTIMETerminalRuleCall_3_2_1_0; }

		//("at" at=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"at"
		public Keyword getAtKeyword_3_3_0() { return cAtKeyword_3_3_0; }

		//at=STRING
		public Assignment getAtAssignment_3_3_1() { return cAtAssignment_3_3_1; }

		//STRING
		public RuleCall getAtSTRINGTerminalRuleCall_3_3_1_0() { return cAtSTRINGTerminalRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cYearAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cYearYEARTerminalRuleCall_0_0 = (RuleCall)cYearAssignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMonthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonthMONTHTerminalRuleCall_2_0 = (RuleCall)cMonthAssignment_2.eContents().get(0);
		private final Keyword cKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDayDAYTerminalRuleCall_4_0 = (RuleCall)cDayAssignment_4.eContents().get(0);
		
		//Date:
		//	year=YEAR "/" month=MONTH "" day=DAY;
		public ParserRule getRule() { return rule; }

		//year=YEAR "/" month=MONTH "" day=DAY
		public Group getGroup() { return cGroup; }

		//year=YEAR
		public Assignment getYearAssignment_0() { return cYearAssignment_0; }

		//YEAR
		public RuleCall getYearYEARTerminalRuleCall_0_0() { return cYearYEARTerminalRuleCall_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//month=MONTH
		public Assignment getMonthAssignment_2() { return cMonthAssignment_2; }

		//MONTH
		public RuleCall getMonthMONTHTerminalRuleCall_2_0() { return cMonthMONTHTerminalRuleCall_2_0; }

		//""
		public Keyword getKeyword_3() { return cKeyword_3; }

		//day=DAY
		public Assignment getDayAssignment_4() { return cDayAssignment_4; }

		//DAY
		public RuleCall getDayDAYTerminalRuleCall_4_0() { return cDayDAYTerminalRuleCall_4_0; }
	}
	
	
	private CalendarElements pCalendar;
	private EventElements pEvent;
	private DateElements pDate;
	private TerminalRule tYEAR;
	private TerminalRule tMONTH;
	private TerminalRule tDAY;
	private TerminalRule tTIME;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CalendarDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.imta.tp2.calendarDSL.CalendarDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Calendar:
	//	{Calendar} "calendar" "{" events+=Event* "}";
	public CalendarElements getCalendarAccess() {
		return (pCalendar != null) ? pCalendar : (pCalendar = new CalendarElements());
	}
	
	public ParserRule getCalendarRule() {
		return getCalendarAccess().getRule();
	}

	//Event:
	//	"event" name=STRING "{" ("on" on=Date & ("from" from=TIME)? & ("to" to=TIME)? & ("at" at=STRING)?) "}";
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Date:
	//	year=YEAR "/" month=MONTH "" day=DAY;
	public DateElements getDateAccess() {
		return (pDate != null) ? pDate : (pDate = new DateElements());
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	//terminal YEAR:
	//	"0".."9" "0".."9" "0".."9" "0".."9";
	public TerminalRule getYEARRule() {
		return (tYEAR != null) ? tYEAR : (tYEAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "YEAR"));
	} 

	//terminal MONTH:
	//	"0".."1"? "0".."9";
	public TerminalRule getMONTHRule() {
		return (tMONTH != null) ? tMONTH : (tMONTH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MONTH"));
	} 

	//terminal DAY:
	//	"/" "0".."3"? "0".."9";
	public TerminalRule getDAYRule() {
		return (tDAY != null) ? tDAY : (tDAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DAY"));
	} 

	//terminal TIME:
	//	"0".."9" "0".."9" ":" "0".."9" "0".."9";
	public TerminalRule getTIMERule() {
		return (tTIME != null) ? tTIME : (tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TIME"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

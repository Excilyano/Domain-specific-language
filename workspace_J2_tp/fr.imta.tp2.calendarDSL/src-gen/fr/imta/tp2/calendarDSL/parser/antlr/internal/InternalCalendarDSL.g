/*
* generated by Xtext
*/
grammar InternalCalendarDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.imta.tp2.calendarDSL.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.imta.tp2.calendarDSL.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.imta.tp2.calendarDSL.services.CalendarDSLGrammarAccess;

}

@parser::members {

 	private CalendarDSLGrammarAccess grammarAccess;
 	
    public InternalCalendarDSLParser(TokenStream input, CalendarDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Calendar";	
   	}
   	
   	@Override
   	protected CalendarDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCalendar
entryRuleCalendar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCalendarRule()); }
	 iv_ruleCalendar=ruleCalendar 
	 { $current=$iv_ruleCalendar.current; } 
	 EOF 
;

// Rule Calendar
ruleCalendar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCalendarAccess().getCalendarAction_0(),
            $current);
    }
)	otherlv_1='calendar' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCalendarAccess().getCalendarKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCalendarAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCalendarAccess().getEventsEventParserRuleCall_3_0()); 
	    }
		lv_events_3_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCalendarRule());
	        }
       		add(
       			$current, 
       			"events",
        		lv_events_3_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCalendarAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='event' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_2());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEventAccess().getUnorderedGroup_3());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_3(), 0);
	 				}
					({true}?=>(	otherlv_4='on' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEventAccess().getOnKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getOnDateParserRuleCall_3_0_1_0()); 
	    }
		lv_on_5_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"on",
        		lv_on_5_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_3(), 1);
	 				}
					({true}?=>(	otherlv_6='from' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEventAccess().getFromKeyword_3_1_0());
    }
(
(
		lv_from_7_0=RULE_TIME
		{
			newLeafNode(lv_from_7_0, grammarAccess.getEventAccess().getFromTIMETerminalRuleCall_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"from",
        		lv_from_7_0, 
        		"TIME");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_3(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_3(), 2);
	 				}
					({true}?=>(	otherlv_8='to' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEventAccess().getToKeyword_3_2_0());
    }
(
(
		lv_to_9_0=RULE_TIME
		{
			newLeafNode(lv_to_9_0, grammarAccess.getEventAccess().getToTIMETerminalRuleCall_3_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"to",
        		lv_to_9_0, 
        		"TIME");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_3(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_3(), 3);
	 				}
					({true}?=>(	otherlv_10='at' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getEventAccess().getAtKeyword_3_3_0());
    }
(
(
		lv_at_11_0=RULE_STRING
		{
			newLeafNode(lv_at_11_0, grammarAccess.getEventAccess().getAtSTRINGTerminalRuleCall_3_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"at",
        		lv_at_11_0, 
        		"STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_3());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getEventAccess().getUnorderedGroup_3())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEventAccess().getUnorderedGroup_3());
	}

)	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getEventAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDate
entryRuleDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); }
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current; } 
	 EOF 
;

// Rule Date
ruleDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_year_0_0=RULE_YEAR
		{
			newLeafNode(lv_year_0_0, grammarAccess.getDateAccess().getYearYEARTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"year",
        		lv_year_0_0, 
        		"YEAR");
	    }

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDateAccess().getSolidusKeyword_1());
    }
(
(
		lv_month_2_0=RULE_MONTH
		{
			newLeafNode(lv_month_2_0, grammarAccess.getDateAccess().getMonthMONTHTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"month",
        		lv_month_2_0, 
        		"MONTH");
	    }

)
)	otherlv_3='' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDateAccess().getKeyword_3());
    }
(
(
		lv_day_4_0=RULE_DAY
		{
			newLeafNode(lv_day_4_0, grammarAccess.getDateAccess().getDayDAYTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"day",
        		lv_day_4_0, 
        		"DAY");
	    }

)
))
;





RULE_YEAR : '0'..'9' '0'..'9' '0'..'9' '0'..'9';

RULE_MONTH : ('0'..'1')? '0'..'9';

RULE_DAY : '/' ('0'..'3')? '0'..'9';

RULE_TIME : '0'..'9' '0'..'9' ':' '0'..'9' '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


